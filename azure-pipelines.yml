# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

schedules:
- cron: "1 0 * * 0"
  displayName: Weekly weekend build
  branches:
    include:
    - master

trigger:
- master

pr:
- master

strategy:
  matrix:
    # lint for .md files
    'markdownlint':
      image: 'ubuntu-20.04'
      cmd: "./.ci/travis.sh markdownlint"
      skipCache: true
      needMdl: true

pool:
  vmImage: $(image)

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  SKIP_CACHE: $(skipCache)
  IMAGE: $(image)
  ON_CRON_ONLY: $(onCronOnly)
  NEED_XMLSTARLET: $(needXmlstarlet)
  NEED_MDL: $(needMdl)
  BUILD_REASON: $[variables['Build.Reason']]

steps:
- bash: |
    apt-fast install -y xmlstarlet
  condition: |
      and(
           ne(variables['Agent.OS'], 'Darwin'),
           eq(variables.NEED_XMLSTARLET, 'true')
         )

- bash: |
    sudo gem install mdl
  condition: eq(variables.NEED_MDL, 'true')

- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
      maven
    path: $(MAVEN_CACHE_FOLDER)
  displayName: Cache Maven local repo
  condition: ne(variables.SKIP_CACHE, 'true')

- bash: |
    set -e
    echo "ON_CRON_ONLY:"$ON_CRON_ONLY
    echo "BUILD_REASON:"$BUILD_REASON
    eval "$(cmd)"
  condition: |
      or (
          ne(variables.ON_CRON_ONLY, 'true'),
          and(
               eq(variables.ON_CRON_ONLY, 'true'),
               eq(variables['Build.Reason'], 'Schedule')
             )
         )
